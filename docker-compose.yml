services:
#  app:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    restart: unless-stopped
#    ports:
#      - "8070:8070"
#    depends_on:
#      cdr-db:
#        condition: service_healthy
#      broker:
#        condition: service_healthy
#      brt-db:
#        condition: service_healthy
#    environment:
#      test_db-url: jdbc:postgresql://cdr-db:5432/test_db
#      test_db-username: sa
#      test_db-password: password
#      brt-url: jdbc:postgresql://brt-db:5432/brt
#      brt-username: user1
#      brt-password: password1
#      rabbit_broker: broker

  broker:
    image: rabbitmq:3.13.1-management
    container_name: bb-rabbitmq
    restart: unless-stopped
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  cdr-db:
    image: postgres:14.7
    container_name: postgres_cdr
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - ./CDR:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=sa
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=test_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sa"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  brt-db:
    image: postgres:14.7
    container_name: postgres_brt
    restart: unless-stopped
    ports:
      - "5434:5432"
    volumes:
      - ./BRT:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=user1
      - POSTGRES_PASSWORD=password1
      - POSTGRES_DB=brt
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

#  hrs-db:
#      image: postgres:14.7
#      container_name: postgres_hrs
#      restart: unless-stopped
#      ports:
#        - "5435:5432"
#      volumes:
#        - ./HRS:/var/lib/postgresql/data
#      environment:
#        - POSTGRES_USER=user2
#        - POSTGRES_PASSWORD=password2
#        - POSTGRES_DB=hrs
#      healthcheck:
#        test: ["CMD-SHELL", "pg_isready -U user2"]
#        interval: 30s
#        timeout: 10s
#        retries: 3
#        start_period: 30s
